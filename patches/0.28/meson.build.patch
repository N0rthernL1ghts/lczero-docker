--- meson.build	2023-05-11 11:54:23.530970641 +0200
+++ meson-mod.build	2023-05-11 08:14:36.573691468 +0200
@@ -36,11 +36,6 @@
   # Thread safety annotation
   add_project_arguments('-Wthread-safety', language : 'cpp')
 endif
-if cc.get_id() == 'clang' or cc.get_id() == 'gcc'
-  if get_option('buildtype') == 'release'
-    add_project_arguments(cc.get_supported_arguments(['-march=native']), language : 'cpp')
-  endif
-endif
 if cc.get_id() == 'msvc'
   # Silence some zlib warnings.
   add_global_arguments('/wd4131', '/wd4267', '/wd4127', '/wd4244', '/wd4245', language : 'c')
@@ -97,32 +92,11 @@
 ]
 files += pb_files
 
-# Extract git short revision.
-short_rev = 'unknown'
-if git.found()
-  r = run_command(git, 'rev-parse', '--short', 'HEAD')
-  if r.returncode() == 0
-    # Now let's check if the working directory is clean.
-    if run_command(git, 'diff-index', '--quiet', 'HEAD').returncode() == 0
-      short_rev = r.stdout().strip()
-      if run_command(git, 'describe', '--exact-match', '--tags').returncode() == 0
-        short_rev = ''
-      endif
-    else
-      short_rev = 'dirty'
-      warning('Cannot extract valid git short revision from dirty working directory.')
-    endif
-  else
-    warning('Failed to parse short revision. Use git clone instead of downloading the archive from GitHub.')
-  endif
-endif
 
 # Construct build identifier.
-build_identifier = ''
-if short_rev != ''
-  build_identifier = 'git.' + short_rev
-  message('Using build identifier "' + build_identifier + '".')
-endif
+build_identifier = 'docker.n0rthernl1ghts.lc0
+message('Using build identifier "' + build_identifier + '".')
+
 
 conf_data = configuration_data()
 conf_data.set_quoted('BUILD_IDENTIFIER', build_identifier)
